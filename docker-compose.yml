version: "4.17.0"
#version: "4.17.0"
services:

  #PHP
  php:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=app
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - 8000:8000
    depends_on:
      - localhost
      #- redis


  #websocket
  websocket:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=websocket
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - 6001:6001
    depends_on:
      - localhost
      #- redis

  #database server
  localhost:
    image: mysql:8.0.25
    ports:
      - 3306:3306
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql 

    # container_name: mysql_db
    # volumes:
    #   - ./data:/data
    #   - mysql_data:/var/lib/mysql        

  #Radis server
  #redis: 
    #image: redis.alpine
    #command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    #ports: 
      #- 6379:6379
  
  #queue
  queue:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=queue
    working_dir: /var/www
    volumes:
      - ./:/var/www
  # this will use same entry piont as php, except the php artisan commands will be skipped conditionally
  
  #node
  node:
    build:
      context: .
      target: node
    volumes:
      - .:/usr/src
      - ./node_modules:/user/src/node_modules
    tty: true

volumes:
  db-data: ~